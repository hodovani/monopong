{"version":3,"sources":["webpack://monopong/./src/ball.js","webpack://monopong/./src/game.js","webpack://monopong/./src/gameState.js","webpack://monopong/./src/getRandomInt.js","webpack://monopong/./src/helpers.js","webpack://monopong/./src/paddle.js","webpack://monopong/./src/playArea.js","webpack://monopong/./src/vector.js","webpack://monopong/webpack/bootstrap","webpack://monopong/webpack/runtime/define property getters","webpack://monopong/webpack/runtime/hasOwnProperty shorthand","webpack://monopong/webpack/runtime/make namespace object","webpack://monopong/./src/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAA4C;AACN;;AAE/B;AACP;AACA;AACA,8BAA8B,2DAAY;AAC1C,oCAAoC,qDAAW,EAAE,mBAAmB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACpB4B;AACQ;AACJ;AACA;AACM;AACM;AACiC;;AAEtE;AACP,iBAAiB,+BAA+B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,+DAAuB;AAC5C,yBAAyB,6DAAmB;AAC5C;;AAEA,wBAAwB,uCAAI,KAAK,2CAAM,wBAAwB,2CAAM;AACrE,4BAA4B,+CAAQ,EAAE,yCAAyC;AAC/E,0BAA0B,2CAAM,EAAE,yCAAyC;;AAE3E;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,YAAY,OAAO;AACnB;AACA,iBAAiB,+DAAuB;AACxC;AACA;AACA,iBAAiB,yDAAiB;AAClC;AACA;AACA,iBAAiB,yDAAiB;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iDAAiD,+BAA+B;AAChF,SAAS;AACT;AACA;AACA,yBAAyB,yDAAiB;AAC1C;AACA;;AAEA;AACA,wBAAwB,uCAAI,KAAK,2CAAM;AACvC,qBAAqB,yDAAiB;AACtC;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,+DAA+D;AACzF;AACA;AACA;AACA,uDAAuD,2DAAY;AACnE,gCAAgC,qDAAW,EAAE,oBAAoB;AACjE;AACA;AACA;AACA,iCAAiC,6DAAmB;AACpD;AACA;AACA,6BAA6B,+DAAuB;AACpD;AACA;AACA;;AAEA;AACA;AACA;AACA,K;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4EAA4E,yDAAiB;AAC7F,yBAAyB,yDAAiB;AAC1C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iCAAiC,2CAAM;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iCAAiC,2CAAM;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C,yBAAyB,0DAAgB;AACzC;AACA,8BAA8B,4BAA4B;AAC1D,0BAA0B,0DAAgB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,C;;;;;;;;;;;;;;ACxLA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA,yDAAyD;AACzD;;;;;;;;;;;;;;;;;;;ACJgC;;AAEhC,sBAAsB,eAAe;AACrC;AACA,eAAe,2CAAM;AACrB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;ACfqC;;AAE9B;AACP,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,0BAA0B;AACpC;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACtCqC;;AAE9B;AACP,iBAAiB,eAAe;AAChC;AACA,0BAA0B,8CAAM,iB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AChB2C;;AAEpC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6C;AACA,kBAAkB,0DAAgB;AAClC;AACA;AACA,C;;;;;;UCjBA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;;;;;;;;;ACN8B;;AAE9B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,uCAAI;AACrB;AACA;AACA;AACA,CAAC;;AAED;AACA,iBAAiB,OAAO;AACxB;AACA;;AAEA;AACA;AACA,C","file":"main.js","sourcesContent":["import {getRandomInt} from './getRandomInt';\nimport {degToVector} from './helpers';\n\nexport class Ball {\n    constructor(position, velocity) {\n        this.position = position;\n        const defaultDegree = getRandomInt(0,360);\n        this.velocity = velocity || degToVector({deg: defaultDegree});\n        this.radius = 10;\n    }\n    move(){\n        this.position.x += this.velocity.x;\n        this.position.y += this.velocity.y;\n    }\n    draw(ctx){\n        ctx.beginPath();\n        ctx.fillStyle = '#000';\n        ctx.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI, false);\n        ctx.fill();\n    }\n}\n","import {Ball} from './ball';\nimport {PlayArea} from './playArea';\nimport {Paddle} from './paddle';\nimport {Vector} from './vector';\nimport {gameState} from './gameState';\nimport {getRandomInt} from './getRandomInt';\nimport {degToVector, getNextPlayGameTime, radiansToDegrees} from './helpers';\n\nexport class Game {\n    constructor({size, countDownElement, canvas}){\n        this.canvas = canvas;\n        this.size = size;\n        this.radius = this.size / 2.3;\n        this.center = this.size / 2;\n        this.x0 = this.center;\n        this.y0 = this.center;\n        this.rightPressed = false;\n        this.leftPressed = false;\n        this.isTouch = false;\n        this.touchPosition = undefined;\n        this.state = gameState.COUNTING_DOWN;\n        this.countDown = getNextPlayGameTime();\n        this.countDownElement = countDownElement;\n\n        this.ball = new Ball(new Vector(this.x0, this.y0), new Vector(1, 1), this);\n        this.playArea = new PlayArea({center: this.center, radius: this.radius});\n        this.paddle = new Paddle({center: this.center, radius: this.radius});\n        \n        document.addEventListener('keydown', this.keyDownHandler.bind(this), false);\n        document.addEventListener('keyup', this.keyUpHandler.bind(this), false);\n        document.addEventListener(\"touchstart\", this.touchStart.bind(this), false);\n        document.addEventListener(\"touchmove\", this.touchMove.bind(this), false);\n        document.addEventListener(\"touchend\", this.touchEnd.bind(this), false);\n        document.addEventListener(\"touchcancel\", this.touchEnd.bind(this), false);\n\n        this.canvas.classList.add('hidden');\n        this.countDownElement.classList.remove('hidden');\n    }\n\n    update({canvas}){\n        switch(this.state){\n            case gameState.COUNTING_DOWN:\n                this.updateCountingDownState(canvas);\n                break;\n            case gameState.INITIAL:\n                this.updateInitialState();\n                break;\n            case gameState.PLAYING:\n                this.updatePlaying(canvas);\n                break;\n        }\n    }\n\n    updateCountingDownState(){\n        const currentDate = new Date();\n        const diffMiliseconds = currentDate - this.countDown;\n        const seconds = parseInt(Math.floor(diffMiliseconds / 1000));\n        if(currentDate < this.countDown){\n            this.countDownElement.innerHTML = `${'ðŸ˜¢'.repeat(Math.abs(seconds))}`;\n        } else {\n            this.canvas.classList.remove('hidden');\n            this.countDownElement.classList.add('hidden');\n            this.state = gameState.INITIAL;\n        }\n    }\n\n    updateInitialState(){\n        this.ball = new Ball(new Vector(this.x0, this.y0));\n        this.state = gameState.PLAYING;\n    }\n\n    updatePlaying(canvas){\n        this.clearCanvas(canvas);\n\n        if(this.isTouch){\n            this.touchHandler();\n        }\n\n        // Draw current game state\n        const ctx = canvas.getContext('2d');\n        this.playArea.draw(ctx);\n        this.ball.draw(ctx);\n        this.paddle.draw(ctx);\n        const paddleSector = this.paddle.sector();\n        // Calculate next game state\n        this.ball.move();\n        this.paddle.move({leftPressed: this.leftPressed, rightPressed: this.rightPressed});\n        // Check boundaries\n        if(this.playArea.center.distanceTo(this.ball.position) > this.playArea.radius - this.ball.radius){\n            const velocityDeg = this.ball.velocity.toDeg();\n            const newVelocityDeg = velocityDeg + 180 + getRandomInt(-20, 20);\n            const newVelocity = degToVector({deg: newVelocityDeg});\n            this.ball.velocity = newVelocity;\n            if(!ctx.isPointInPath(paddleSector, this.ball.position.x, this.ball.position.y)){\n                this.clearCanvas(canvas);\n                this.countDown = getNextPlayGameTime();\n                this.canvas.classList.add('hidden');\n                this.countDownElement.classList.remove('hidden');\n                this.state = gameState.COUNTING_DOWN;\n            }\n        }\n    }\n\n    clearCanvas(canvas) {\n        const ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n    }   \n\n    keyDownHandler(event) {\n        if(event.keyCode === 39) {\n            this.rightPressed = true;\n        }\n        else if(event.keyCode === 37) {\n            this.leftPressed = true;\n        }\n    }\n\n    keyUpHandler(event) {\n        if(event.keyCode === 39) {\n            this.rightPressed = false;\n        }\n        else if(event.keyCode === 37) {\n            this.leftPressed = false;\n        }\n\n        if((event.keyCode === 39 || event.keyCode === 37) && this.state === gameState.INITIAL){\n            this.state = gameState.PLAYING;\n        }\n    }\n\n    touchStart(event){\n        console.log('Touch start');\n        this.isTouch = true;\n        const touchY = event.touches[0].pageY - document.body.scrollHeight/2;\n        const touchX = event.touches[0].pageX - document.body.scrollWidth/2;\n        this.touchPosition = new Vector(touchX, touchY);\n        event.preventDefault();\n        event.stopPropagation();\n    }\n\n    touchEnd(){\n        console.log('Touch end');\n        this.isTouch = false;\n        this.touchPosition = undefined;\n        this.leftPressed = false;\n        this.rightPressed = false;\n    }\n\n    touchMove(event){\n        console.log('Touch move');\n        const touchY = event.touches[0].pageY - document.body.scrollHeight/2;\n        const touchX = event.touches[0].pageX - document.body.scrollWidth/2;\n        this.touchPosition = new Vector(touchX, touchY);\n        event.preventDefault();\n        event.stopPropagation();\n    }\n\n    touchHandler(){\n        console.log('Touch handler');\n        const touchY = this.touchPosition.y;\n        const touchX = this.touchPosition.x;\n        let angle = Math.atan2(touchY, touchX);\n        if (angle < 0) { angle += 2 * Math.PI; }\n        const touchDeg = radiansToDegrees(angle);\n        let paddleAngle = this.paddle.angle;\n        if (paddleAngle < 0) { paddleAngle += 2 * Math.PI; }\n        const paddleDeg = radiansToDegrees(paddleAngle);\n        // console.log(touchDeg);\n        // console.log(paddleDeg);\n        let diff = (touchDeg - paddleDeg + 180) % 360 - 180;\n        if(Math.abs(diff) > 1){\n            if(Math.sign(diff) < 0){\n                this.rightPressed = true;\n                this.leftPressed = false;\n            } else {\n                this.rightPressed = false;\n                this.leftPressed = true;\n            }\n        }else {\n            this.leftPressed = false;\n            this.leftPressed = true;\n        }\n        \n    }\n}","const gameState = {\n    COUNTING_DOWN: 'COUNTING_DOWN',\n    INITIAL: 'INITIAL',\n    PLAYING: 'PLAYING',\n};\nexport {gameState};","const getRandomInt = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n}\n\nexport {getRandomInt};","import {Vector} from './vector';\n\nfunction degToVector({deg, speed = 1}){\n    deg *= Math.PI / 180;\n    return new Vector(speed * Math.cos(deg), 2 * Math.sin(deg));\n};\n\nfunction getNextPlayGameTime(){\n    const date = new Date();\n    date.setSeconds(date.getSeconds() + 3);\n    return date;\n}\n\nfunction radiansToDegrees(radians){\n    return (radians * (180/Math.PI)) % 360;\n}\n\nexport {degToVector, getNextPlayGameTime, radiansToDegrees};","import { Vector } from './vector.js';\n\nexport class Paddle {\n    constructor({radius, center}) {\n        this.radius = radius;\n        this.center = center;\n        this.angle = 0;\n        this.direction = 0;\n        this.size = 0.1;\n        this.speed = 0.009;\n    }\n    move({rightPressed, leftPressed}){\n        if(rightPressed && !leftPressed){\n            this.direction = -1;\n        } else if(!rightPressed && leftPressed){\n            this.direction = 1;\n        } else {\n            this.direction = 0;\n        }\n\n        this.angle += this.direction * this.speed * Math.PI;\n    }\n    draw(ctx){\n        const paddle = new Path2D();\n        paddle.arc(this.center, this.center, this.radius, this.angle - this.size, this.angle + this.size);\n        ctx.fillStyle = '#000';\n        ctx.strokeStyle = 'rgba(0,0,0,1)';\n        ctx.lineWidth = 3;\n        ctx.setLineDash([]);\n        ctx.stroke(paddle);\n    }\n    sector(){\n        const sector = new Path2D();\n        sector.moveTo(this.center, this.center);\n        sector.arc(this.center, this.center, this.radius, this.angle - this.size, this.angle + this.size);\n        sector.lineTo(this.center, this.center);\n        return sector;\n    }\n}\n","import { Vector } from './vector.js';\n\nexport class PlayArea {\n    constructor({center, radius}) {\n        this.radius = radius;\n        this.center = new Vector(center, center); \n    }\n    draw(ctx){\n        ctx.beginPath();\n        ctx.lineWidth = 1;\n        ctx.setLineDash([4, 16]);\n        ctx.lineDashOffset = 5;\n        ctx.strokeStyle = 'rgba(0,0,0,0.3)';\n        ctx.arc(this.center.x, this.center.y, this.radius, 0, 2 * Math.PI, false);\n        ctx.stroke();\n    }\n}\n","import {radiansToDegrees} from './helpers';\n\nexport class Vector {\n    constructor(x, y) {\n        this.x = x || 0;\n        this.y = y || 0;\n    }\n    distanceTo(vector) {\n        return Math.sqrt((this.x - vector.x) * (this.x - vector.x) + (this.y - vector.y) * (this.y - vector.y));\n    }\n    toDeg(){\n        var deltaX = this.x;\n        var deltaY = this.y;\n        var rad = Math.atan2(deltaY, deltaX); \n        var deg = radiansToDegrees(rad);\n        return deg;\n    }\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Game } from './game';\n\nconst canvas = document.querySelector('canvas');\nconst countDownElement = document.querySelector('#counting-down');\nconst smallerDimension = Math.min(canvas.clientWidth, canvas.clientHeight);\nconst ctx = canvas.getContext('2d');\nconst scale = window.devicePixelRatio;\n\nctx.scale(scale, scale);\ncanvas.width = smallerDimension;\ncanvas.height = smallerDimension;\n\nconst game = new Game({\n    size: smallerDimension,\n    countDownElement,\n    canvas\n});\n\nfunction render(){\n    game.update({canvas});\n    window.requestAnimationFrame(render);\n}\n\nwindow.onload = function () {\n    render();\n}"],"sourceRoot":""}